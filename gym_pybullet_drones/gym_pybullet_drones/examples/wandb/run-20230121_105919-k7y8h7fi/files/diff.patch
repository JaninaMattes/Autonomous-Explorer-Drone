diff --git a/src/ppo/ppo_continuous.py b/src/ppo/ppo_continuous.py
index a080400f..cb6b7b71 100644
--- a/src/ppo/ppo_continuous.py
+++ b/src/ppo/ppo_continuous.py
@@ -47,6 +47,9 @@ from wrapper.stats_logger import CSVWriter
 import optuna
 from optuna.integration.wandb import WeightsAndBiasesCallback
 
+# constants
+DEFAULT_PROJECT_NAME = 'EXP_OpenAIGym_PPO'
+
 # Paths and other constants
 MODEL_PATH = './models/'
 LOG_PATH = './log/'
@@ -851,18 +854,18 @@ def arg_parser():
     parser = argparse.ArgumentParser()
     # fmt: off
     parser = argparse.ArgumentParser()
-    parser.add_argument("--video", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=False, help="if toggled, capture video of run")
-    parser.add_argument("--train", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=True, help="if toggled, run model in training mode")
-    parser.add_argument("--test", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=False, help="if toggled, run model in testing mode")
-    parser.add_argument("--hyperparam", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=True, help="if toggled, log hyperparameters")
-    parser.add_argument("--exp-name", type=str, default=os.path.basename(__file__).rstrip(".py"), help="the name of this experiment")
-    parser.add_argument("--project-name", type=str, default='OpenAIGym-PPO', help="the name of this project") 
-    parser.add_argument("--gym-id", type=str, default="Pendulum-v1", help="the id of the gym environment")
-    parser.add_argument("--learning-rate", type=float, default=3e-4, help="the learning rate of the optimizer")
-    parser.add_argument("--seed", type=int, default=1, help="seed of the experiment")
-    parser.add_argument("--total-timesteps", type=int, default=2000000, help="total timesteps of the experiments")
+    parser.add_argument("--video",          type=lambda x: bool(strtobool(x)),  default=False, nargs="?", const=False, help="if toggled, capture video of run")
+    parser.add_argument("--train",          type=lambda x: bool(strtobool(x)),  default=False, nargs="?", const=True, help="if toggled, run model in training mode")
+    parser.add_argument("--test",           type=lambda x: bool(strtobool(x)),  default=False, nargs="?", const=False, help="if toggled, run model in testing mode")
+    parser.add_argument("--hyperparam",     type=lambda x: bool(strtobool(x)),  default=False, nargs="?", const=True, help="if toggled, log hyperparameters")
+    parser.add_argument("--exp-name",       type=str,                           default=os.path.basename(__file__).rstrip(".py"), help="the name of this experiment")
+    parser.add_argument("--project-name",   type=str,                           default=DEFAULT_PROJECT_NAME, help="the name of this project") 
+    parser.add_argument("--gym-id",         type=str,                           default="Pendulum-v1", help="the id of the gym environment")
+    parser.add_argument("--learning-rate",  type=float,                         default=3e-4, help="the learning rate of the optimizer")
+    parser.add_argument("--seed",           type=int,                           default=42, help="seed of the experiment")
+    parser.add_argument("--total-timesteps", type=int,                          default=2_000_000, help="total timesteps of the experiments")
     parser.add_argument("--torch-deterministic", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True, help="if toggled, `torch.backends.cudnn.deterministic=False`")
-    parser.add_argument("--cuda", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True, help="if toggled, cuda will be enabled by default")
+    parser.add_argument("--cuda",           type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True, help="if toggled, cuda will be enabled by default")
     
     # Parse arguments if they are given
     args = parser.parse_args()
@@ -1044,8 +1047,8 @@ if __name__ == '__main__':
     
     # Hyperparameter
     total_training_steps = 1_200_000     # time steps regarding batches collected and train agent
-    max_trajectory_size = 1024                    # max number of episode samples to be sampled per time step. 
-    n_rollout_steps = 2048               # number of batches per episode, or experiences to collect per environment
+    max_trajectory_size = 1024           # max number of episode samples to be sampled per time step. 
+    n_rollout_steps = 2048               # number of experiences to collect per environment
     n_optepochs = 64                     # Number of epochs per time step to optimize the neural networks
     learning_rate_p = 1e-4               # learning rate for policy network
     learning_rate_v = 1e-3               # learning rate for value network
@@ -1062,7 +1065,7 @@ if __name__ == '__main__':
     
     # setup for torch save models and rendering
     render_video = False
-    video_log_steps = 1000
+    video_log_steps = 10
     render_steps = 10
     save_steps = 100
 
